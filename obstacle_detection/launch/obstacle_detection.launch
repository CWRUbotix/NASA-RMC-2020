<?xml version="1.0"?>
<launch>
    <!-- "true" if running roscore from the robot -->
    <arg name="on_robot" value="$(eval '192.168.0.100' in optenv('ROS_MASTER_URI'))"/>
    <arg name="sim" default="false"/>
    <arg name="map_file" value="$(find obstacle_detection)/maps/arena_map.yaml"/>

    <rosparam command="load" file = "$(find glenn_launcher)/params/obstacle_detection/obstacle_detection_params.yaml" ns="obstacle_detection"/>
    <include file="$(find sbg_ros_driver)/launch/sbg_device.launch" unless="$(arg sim)"/>
    <include file="$(find glenn_launcher)/launch/obstacle_detection/realsense_camera.launch" unless="$(arg sim)"/>
    <rosparam command="load" file="$(find obstacle_detection)/params/obstacle_detection_params.yaml" ns="obstacle_detection"/>
    <include file="$(find obstacle_detection)/launch/realsense_camera.launch" unless="$(arg sim)"/>

    <node name="realsense_imu_filter" pkg="imu_filter_madgwick" type="imu_filter_node">
        <remap from="/imu/data_raw" to="/imu_realsense/data_raw"/>
        <remap from="/imu/data" to="/imu_realsense/data"/>
        <param name="use_mag" value="false"/>
        <param name="publish_tf" value="true"/>
        <param name="fixed_frame" value="realsense_footprint_link"/>
        <param name="remove_yaw_tf" value="true"/>
        <param name="reverse_tf" value="false"/>
    </node>

    <node name="pcl_manager" pkg="nodelet" type="nodelet" args="manager"/>

    <node name="point_cloud_decimator" pkg="nodelet" type="nodelet" args="load pcl/VoxelGrid pcl_manager">
        <remap from="~input" to="/realsense/depth/points_raw"/>
        <remap from="~output" to="/realsense/depth/points"/>
        <param name="leaf_size" value="0.05"/>
        <param name="filter_field_name" value="z"/>
        <param name="filter_limit_min" value="0.0"/>
        <param name="filter_limit_max" value="3.0"/>
        <param name="use_indices" value="false"/>
        <param name="output_frame" value="realsense_footprint_link"/>
    </node>

   <node name="point_cloud_normal_estimator" pkg="obstacle_detection" type="point_cloud_normal_estimator">
        <remap from="input_cloud" to="/realsense/depth/points"/>
        <remap from="output_cloud" to="/realsense/depth/points_obstacles"/>
        <remap from="output_models" to="/obstacles/coefficients"/>

        <param name="search_radius" value="0.07"/>
        <param name="normal_threshold" value="0.95"/>
        <param name="cluster_tolerance" value="0.1"/>
    </node>

    <node name="obstacle_detection_node" pkg="obstacle_detection" type="obstacle_detection_node.py">
        <remap from="input_cloud" to="/realsense/depth/points_obstacles"/>
    </node>

    <node name="global_occupancy_grid_node" pkg="obstacle_detection" type="global_occupancy_grid_node.py" output="screen" cwd="node"/>
    <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)"/>
</launch>
