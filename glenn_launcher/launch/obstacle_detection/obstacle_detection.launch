<?xml version="1.0"?>
<launch>
    <!-- "true" if running roscore from the robot -->
    <arg name="on_robot" value="$(eval '192.168.0.100' in optenv('ROS_MASTER_URI'))"/>
    <arg name="custom_pcl_filter" default="true"/>

    <rosparam command="load" file = "$(find glenn_launcher)/params/obstacle_detection/obstacle_detection_params.yaml" ns="obstacle_detection"/>

    <!-- only run if not using simulator -->
    <!-- <node name="realsense_motion_tracking" pkg="obstacle_detection" type="realsense_motion_tracking_node.py" cwd="node"/> -->
    <node name="realsense_imu_filter" pkg="imu_filter_madgwick" type="imu_filter_node">
        <remap from="/imu/data_raw" to="/imu_realsense/data_raw"/>
        <remap from="/imu/data" to="/imu_realsense/data"/>
        <param name="use_mag" value="false"/>
        <param name="publish_tf" value="true"/>
        <param name="fixed_frame" value="realsense_footprint_link"/>
        <param name="remove_yaw_tf" value="true"/>
        <param name="reverse_tf" value="false"/>
    </node>

    <node name="pcl_manager" pkg="nodelet" type="nodelet" args="manager"/>

    <node if="$(arg custom_pcl_filter)" name="point_cloud_decimator" pkg="nodelet" type="nodelet" args="load obstacle_detection/PointCloudDecimator pcl_manager">
        <remap from="input_cloud" to="/realsense/depth/points_raw"/>
        <remap from="output_cloud" to="/realsense/depth/points"/>
        <param name="voxel_size" value="0.05"/>
    </node>

    <node unless="$(arg custom_pcl_filter)" name="point_cloud_decimator" pkg="nodelet" type="nodelet" args="load pcl/VoxelGrid pcl_manager">
        <remap from="~input" to="/realsense/depth/points_raw"/>
        <remap from="~output" to="/realsense/depth/points"/>
        <param name="leaf_size" value="0.05"/>
        <param name="use_indices" value="false"/>
        <param name="filter_limit_max" value="5.0"/>
    </node>

    <node name="point_cloud_normal_estimator" pkg="obstacle_detection" type="point_cloud_normal_estimator">
        <remap from="input_cloud" to="/realsense/depth/points"/>
        <param name="search_radius" value="0.07"/>
    </node>

    <node name="obstacle_detection_node" pkg="obstacle_detection" type="obstacle_detection_node.py" output="screen" cwd="node"/>
    <node name="global_occupancy_grid_node" pkg="obstacle_detection" type="global_occupancy_grid_node.py" output="screen" cwd="node"/>
</launch>
